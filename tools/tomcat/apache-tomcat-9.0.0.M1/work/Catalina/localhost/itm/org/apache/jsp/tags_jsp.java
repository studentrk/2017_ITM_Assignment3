/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M1
 * Generated at: 2018-01-09 11:12:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import java.net.*;
import itm.image.*;
import itm.model.*;
import itm.util.*;
import com.sun.org.apache.xpath.internal.operations.Bool;

public final class tags_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("itm.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("itm.image");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("itm.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sun.org.apache.xpath.internal.operations.Bool");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("/*******************************************************************************\r\n");
      out.write(" This file is part of the WM.II.ITM course 2016\r\n");
      out.write(" (c) University of Vienna 2009-2016\r\n");
      out.write(" *******************************************************************************/\r\n");
      out.write("-->\r\n");



      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"hoverimage.css\">\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        fill in your code here :)\r\n");
      out.write("        ");


            String tag = null;

            // ***************************************************************
            //  Fill in your code here! DONE
            // ***************************************************************

            // get "tag" parameter
            tag = request.getParameter("tag");
            // if no param was passed, forward to index.jsp (using jsp:forward)
            if (tag.isEmpty()) {
                
      if (true) {
        _jspx_page_context.forward("index.jsp");
        return;
      }

            }



        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h1>Media that is tagged with ");
      out.print( tag );
      out.write("</h1>\r\n");
      out.write("        <a href=\"index.jsp\">back</a>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");

            // ***************************************************************
            //  Fill in your code here!
            // ***************************************************************

            // get all media objects that are tagged with the passed tag


            // iterate over all available media objects and display them


            // get the file paths - this is NOT good style (resources should be loaded via inputstreams...)
            // we use it here for the sake of simplicity.
            String basePath = getServletConfig().getServletContext().getRealPath( "media"  );
            if ( basePath == null )
                throw new NullPointerException( "could not determine base path of media directory! please set manually in JSP file!" );
            File base = new File( basePath );
            File imageDir = new File( basePath, "img");
            File audioDir = new File( basePath, "audio");
            File videoDir = new File( basePath, "video");
            File metadataDir = new File( basePath, "md");
            MediaFactory.init( imageDir, audioDir, videoDir, metadataDir );

            // get all media objects
            ArrayList<AbstractMedia> media = MediaFactory.getMedia();

            int c=0; // counter for rowbreak after 3 thumbnails.
            // iterate over all available media objects
            for (AbstractMedia medium : media) {



                // handle images
                if (medium instanceof ImageMedia) {
                    // ***************************************************************
                    //  Fill in your code here! DONE
                    // ***************************************************************


                    // display image thumbnail and metadata
                    ImageMedia img = (ImageMedia) medium;
                    ArrayList<String> imgTags = img.getTags();
                    Boolean containsTag = false;
                    for(String s : imgTags) {
                        if (s.equals(tag)){
                            containsTag = true;
                            break;
                        }
                    }
                    if (containsTag == true) {
                        c++;

            
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        <div style=\"width:300px;height:300px;padding:10px;float:left;\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <div style=\"width:200px;height:200px;padding:10px;\">\r\n");
      out.write("                <a href=\"media/img/");
      out.print( img.getInstance().getName());
      out.write("\">\r\n");
      out.write("                    <img src=\"media/md/");
      out.print( img.getInstance().getName() );
      out.write(".thumb.png\" border=\"0\"/>\r\n");
      out.write("                </a>\r\n");
      out.write("                <!--  show the histogram of the image on mouse-over and in CSS File-->\r\n");
      out.write("                <figure class=\"figure-top\">\r\n");
      out.write("                    <img style=\"width:200px;height:200px;padding:10px;position:absolute;\"\r\n");
      out.write("                         src=\"media/md/");
      out.print( img.getInstance().getName() );
      out.write(".hist.png\" border=\"0\"/>\r\n");
      out.write("                </figure>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                Name: ");
      out.print( img.getName() );
      out.write("<br/>\r\n");
      out.write("                Dimensions: ");
      out.print( img.getWidth() );
      out.write('x');
      out.print( img.getHeight() );
      out.write("px<br/>\r\n");
      out.write("                Tags: ");
 for (String t : img.getTags()) { 
      out.write("<a href=\"tags.jsp?tag=");
      out.print( t );
      out.write('"');
      out.write('>');
      out.print( t );
      out.write("\r\n");
      out.write("            </a> ");
 } 
      out.write("<br/>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");

                    }
                } else {
                }

            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        ");

            if (c % 3 == 0) {
        
      out.write("\r\n");
      out.write("        <div style=\"clear:left\"/>\r\n");
      out.write("        ");

                }

            } // for

        
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
